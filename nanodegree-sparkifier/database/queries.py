"""
    Helper file containing the queries used for the tables
"""

def getTableNames(config):
    """
    Simply reads the tablenames from the config and returns a list with said names

    Args:
        confg (dict): the dict with the config settings of this script

    Returns:
        list: a list of tablenames in this order: mortality, weather, nuts, dates
    """
    tableNamesList = []
    tableNamesList.append(config["database"]["table_prefix"] + config["database"]["table_mortality"])
    tableNamesList.append(config["database"]["table_prefix"] + config["database"]["table_weather"])
    tableNamesList.append(config["database"]["table_prefix"] + config["database"]["table_nuts"])
    tableNamesList.append(config["database"]["table_prefix"] + config["database"]["table_dates"])

    return(tableNamesList)


def createDropQueries(listOfTableNames):
    """
    Function that generates a list of drop queries (as string)
    Can be run by database connection to drop tables

    Args:
        listOfTableNames: a list of table names to drop. Can be generated by calling the getTableNames function in this script

    Returns:
        list: a list of queries that can be run to drop all tables
    """

    listToReturn = []
    for tableName in listOfTableNames:
        listToReturn.append("DROP TABLE IF EXISTS {};".format(tableName))
    return(listToReturn)

def createCreateQueries(listOfTableNames):
    """
    Creates the create table queries.
    IMPORTANT: pass it the list of tablenames in this order:
    mortality, weather, nuts, dates
    For your convenience, this script contains a function that does just that -> getTableNames

    Args:
        listOfTableNames (list): a list of tablenames, in this order: mortality, weather, nuts, dates

    Raises:
        ValueError: if not the correct number of tables

    Returns:
        list: a list of queries to perform to create the tables
    """

    listToReturn = []

    # mortality
    mortalityQuery = """
    CREATE TABLE IF NOT EXISTS {} (
      year integer,
      week integer,
      nuts varchar(5),
      sex varchar(1),
      minage integer,
      maxage integer,
      number integer,
      CONSTRAINT pk_mortality PRIMARY KEY(year, week, nuts)
    );
    """.format(listOfTableNames[0])
    listToReturn.append(mortalityQuery)

    # weather
    weatherQuery = """
    CREATE TABLE IF NOT EXISTS {} (
      year integer,
      month integer,
      nuts varchar(5),
      mean_maxT float,
      mean_minT float,
      mean_avgT float,
      precipitation float,
      snow float,
      CONSTRAINT pk_weather PRIMARY KEY (year, month, nuts)
    )
    """.format(listOfTableNames[1])
    listToReturn.append(weatherQuery)

    # nuts
    nutsQuery = """
    CREATE TABLE IF NOT EXISTS {} (
      nuts_code char(5),
      country_name text,
      region_name text,
      province_name text,
      area_name text,
      CONSTRAINT pk_nuts PRIMARY KEY(nuts_code)
    )
    """.format(listOfTableNames[2])
    listToReturn.append(nutsQuery)

    # dates
    datesQuery = """
    CREATE TABLE IF NOT EXISTS {} (
      date date,
      month int,
      week int,
      year int,
      CONSTRAINT pk_dates PRIMARY KEY(date)
    )
    """.format(listOfTableNames[3])
    listToReturn.append(datesQuery)

    return(listToReturn)
